[{"content":"//Query functions\n\n/**\n * to find single element, throws error for zero or more\n * getBy - prove an ele exist\n * queryBy - does not throw error for zero, returns null, \n *           prove ele does not exist\n * findBy - async takes 1 sec to execute, after all components rendered\n *          make sure an ele eventually exist\n * \n * Asserting elements are not present\nThe standard getBy methods throw an error when they can't find an element, so if you want to make an assertion that an element is not present in the DOM, you can use queryBy APIs instead:\n\n * to find mutliple or single elements, throws error for zero\n * getAllBy , queryAllBy, findAllBy\n * \n * queryBy\n\nqueryBy* queries return the first matching node for a query, and return null if no elements match. This is useful for asserting an element that is not present. This throws if more than one match is found (use queryAllBy instead).\n\nqueryAllBy queryAllBy* queries return an array of all matching nodes for a query, and return an empty array ([]) if no elements match.\n */\n\nfunction QueryExample () {\n  return(\n    <ul>\n      <li>Green</li>\n      <li>Red</li>\n      <li>Blue</li>\n      <li>White</li>\n    </ul>\n  )\n}\n\nrender(<QueryExample/>)\n\n\n","type":"code","id":"a4cvv"},{"content":"test('to get zero elements', async () => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  expect(() => { screen.getByRole(\"textbox\") }).toThrow()\r\n  expect(screen.queryByRole(\"textbox\")).toEqual(null)\r\n\r\n  // find try to find ele, if not return rejected promise\r\n  let errorThrown = false\r\n  try {\r\n    expect(await screen.findByRole(\"textbox\"))\r\n  }\r\n  catch { errorThrown = true }\r\n  expect(errorThrown).toEqual(true)\r\n})\r\n\r\n","type":"code","id":"42248"},{"content":"test('to get one elements', async() => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  expect(screen.getByRole(\"list\"))\r\n  expect(screen.queryByRole(\"list\"))\r\n  expect(await screen.findByRole(\"list\"))\r\n  // find try to find ele, if not return rejected promise\r\n  let errorThrown = false\r\n  try{\r\n    expect(await screen.findByRole(\"textbox\"))\r\n  }\r\n  catch{\r\n    errorThrown = true\r\n  }\r\n    expect(errorThrown).toEqual(true)\r\n})\r\n","type":"code","id":"0tx6e"},{"content":"test('to get multiple elements', async() => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  expect(() => {screen.getByRole(\"listitem\")}).toThrow()\r\n  expect(() => {screen.queryByRole(\"listitem\")}).toThrow()\r\n  // find try to find ele, if not return rejected promise\r\n  let errorThrown = false\r\n  try{\r\n    expect(await screen.findByRole(\"listitem\"))\r\n  }\r\n  catch{\r\n    errorThrown = true\r\n  }\r\n    expect(errorThrown).toEqual(true)\r\n})\r\n\r\n","type":"code","id":"6in58"},{"content":"test('to get zero elements', async () => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  /**\r\n   * screen.getAllByRole(\"textbox\") is a query to find all elements with the\r\n   * role of \"textbox\" in the rendered component.\r\n\r\n   * () => { screen.getAllByRole(\"textbox\") } wraps this query inside an arrow \r\n   * function, turning it into a function call.\r\n   * .toThrow() checks that this function call results in an error being\r\n   * thrown. */\r\n\r\n  expect(() => { screen.getAllByRole(\"textbox\") }).toThrow()\r\n  expect(screen.queryAllByRole(\"textbox\")).toEqual([])\r\n\r\n  // find try to find ele, if not return rejected promise\r\n  let errorThrown = false\r\n  try {\r\n    expect(await screen.findAllByRole(\"textbox\"))\r\n  }\r\n  catch {\r\n    errorThrown = true\r\n  }\r\n  expect(errorThrown).toEqual(true)\r\n})\r\n","type":"code","id":"bgo96"},{"content":"test('to get one elements', async() => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  expect(screen.getAllByRole(\"list\")).toHaveLength(1)\r\n  expect(screen.queryAllByRole(\"list\"))\r\n  expect(await screen.findAllByRole(\"list\"))\r\n})\r\n","type":"code","id":"nd8ll"},{"content":"test('to get multiple elements', async() => {\r\n  render(<QueryExample />)\r\n  // no textbox exist so it throws error\r\n  expect(screen.getAllByRole(\"listitem\")).toHaveLength(4)\r\n  expect(screen.queryAllByRole(\"listitem\"))\r\n  expect(await screen.findAllByRole(\"listitem\"))\r\n})","type":"code","id":"8z10e"}]